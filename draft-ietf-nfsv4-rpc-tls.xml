<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<?rfc strict="yes"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc
 docName="draft-ietf-nfsv4-rpc-tls-latest"
 category="std"
 updates="5531"
 ipr="trust200902"
 submissionType="IETF"
 xml:lang="en">

<front>

<title abbrev="RPC-Over-TLS">
Towards Remote Procedure Call Encryption By Default
</title>

<author initials="T.M." surname="Myklebust" fullname="Trond Myklebust">
<organization abbrev="Hammerspace">
Hammerspace Inc
</organization>
<address>
<postal>
<street>4300 El Camino Real Ste 105</street>
<city>Los Altos</city>
<region>CA</region>
<code>94022</code>
<country>United States of America</country>
</postal>
<email>trond.myklebust@hammerspace.com</email>
</address>
</author>

<author initials="C.L." surname="Lever" fullname="Charles Lever" role="editor">
<organization abbrev="Oracle">Oracle Corporation</organization>
<address>
<postal>
<street></street>
<city></city>
<region></region>
<code></code>
<country>United States of America</country>
</postal>
<email>chuck.lever@oracle.com</email>
</address>
</author>

<date/>

<area>Transport</area>
<workgroup>Network File System Version 4</workgroup>

<abstract>
<t>
This document describes a mechanism that,
through the use of opportunistic Transport Layer Security (TLS),
enables encryption of in-transit Remote Procedure Call (RPC) transactions
while interoperating with ONC RPC implementations
that do not support this mechanism.
This document updates RFC 5531.
</t>
</abstract>

</front>

<middle>

<section
 anchor="section:8F035331-8EB8-4FBC-973A-673FBA5FE952"
 title="Introduction">
<t>
RFC Editor:
Please remove this Editor's Note and the following paragraph
before this document is published.
</t>
<t>
The source for this draft is maintained in GitHub.
Suggested changes should be submitted as pull requests at
<eref
 target="https://github.com/chucklever/i-d-rpc-tls">
https://github.com/chucklever/i-d-rpc-tls
</eref>.
Instructions are on that page as well.
Editorial changes can be managed in GitHub,
but any substantive change should
be discussed on the nfsv4@ietf.org mailing list.
</t>
<t>
In 2014 the IETF published
<xref target="RFC7258"/>,
which recognized that unauthorized observation
of network traffic had become widespread
and
was a subversive threat
to all who make use of the Internet at large.
It strongly recommended that newly defined Internet protocols
should make a genuine effort to mitigate monitoring attacks.
Typically this mitigation is done by encrypting data in transit.
</t>
<t>
The Remote Procedure Call version 2 protocol
has been a Proposed Standard for three decades
(see
<xref target="RFC5531"/>
and its antecedents).
Over twenty years ago,
Eisler et al. first introduced RPCSEC GSS
as an in-transit encryption mechanism for RPC
<xref target="RFC2203"/>.
However, experience has shown
that RPCSEC GSS with in-transit encryption
can be challenging to use in practice:
<list style="symbols">
<t>
Parts of each RPC header remain in clear-text,
constituting a significant security exposure.
</t>
<t>
Offloading the GSS privacy service is not practical
in large multi-user deployments
since each message is encrypted using a key based
on the issuing RPC user.
</t>
</list>
However strong GSS-provided confidentiality is,
it cannot provide any security if the challenges
of using it result in choosing not to deploy it at all.
</t>
<t>
Moreover, the use of AUTH_SYS
remains common despite the adverse effects
that acceptance of UIDs and GIDs
from unauthenticated clients brings with it.
Continued use is in part because:
<list style="symbols">
<t>
Per-client deployment and administrative costs
are not scalable.
Administrators must provide keying material
for each RPC client, including transient clients.
</t>
<t>
Host identity management and user identity management
must be enforced in the same security realm.
In certain environments,
different authorities might be responsible
for provisioning client systems
versus
provisioning new users.
</t>
</list>
</t>
<t>
The alternative described in the current document is
to employ a transport layer security mechanism
that can protect the confidentiality of each RPC connection
transparently to RPC and upper-layer protocols.
The Transport Layer Security protocol
<xref target="RFC8446"/>
(TLS) is a well-established Internet building block
that protects many standard Internet protocols
such as the Hypertext Transport Protocol (HTTP)
<xref target="RFC2818"/>.
</t>
<t>
Encrypting at the RPC transport layer accords several significant benefits:
<list style="hanging">
<t hangText="Encryption By Default:">
Transport encryption can be enabled
without additional administrative tasks such as
identifying client systems to a trust authority,
generating additional keying material,
or
provisioning a secure network tunnel.
</t>
<t hangText="Encryption Offload:">
Hardware support for the GSS privacy service has not appeared in the marketplace.
However, the use of a well-established transport encryption mechanism
that is employed by other ubiquitous network protocols
makes it more likely that encryption offload for RPC
is practicable.
</t>
<t hangText="Securing AUTH_SYS:">
Most critically, transport encryption can
significantly reduce several security issues
inherent in the current widespread use of AUTH_SYS
(i.e., acceptance of UIDs and GIDs
generated by an unauthenticated client).
</t>
<t hangText="Decoupled User and Host Identities:">
TLS can be used to authenticate peer hosts
while other security mechanisms can handle user authentication.
</t>
</list>
</t>
<t>
The current document specifies the implementation of RPC on an encrypted transport
in a manner that is transparent to upper-layer protocols based on RPC.
The imposition of encryption at the transport layer
protects any upper-layer protocol that employs RPC,
without alteration of that protocol.
</t>
<t>
Further,
<xref target="section:2AE49383-E6B2-4830-8407-995FEBF727F2"/>
of the current document defines policies in line with
<xref target="RFC7435"/>
which enable RPC-on-TLS to be deployed opportunistically
in environments that contain RPC implementations that do not support TLS.
However, specifications for RPC-based upper-layer protocols
should choose to require even stricter policies that guarantee
encryption
and
host authentication
is used for all RPC transactions.
Enforcing the use of RPC-on-TLS is of particular importance
for existing upper-layer protocols whose security infrastructure is weak.
</t>
<t>
The protocol specification in the current document assumes
that support for RPC, TLS, PKI, GSS-API, and DNSSEC
is already available in an RPC implementation
where TLS support is to be added.
</t>
</section>

<section
 anchor="section:024237C9-5504-49B4-A2D3-2D2A5EFBB967"
 title="Requirements Language">
<t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY",
and "OPTIONAL" in this document are to be interpreted
as described in BCP 14
<xref target="RFC2119"/>
<xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.
</t>
</section>

<section
 anchor="section:0EB1100E-DAA8-4B2C-98AE-94258CFDCB1B"
 title="Terminology">
<t>
This document adopts the terminology introduced in Section 3 of
<xref target="RFC6973"/>
and assumes a working knowledge of
the Remote Procedure Call (RPC) version 2 protocol
<xref target="RFC5531"/>
and
the Transport Layer Security (TLS) version 1.3 protocol
<xref target="RFC8446"/>.
</t>
<t>
Note also that the NFS community long ago adopted the
use of the term "privacy" from documents such as
<xref target="RFC2203"/>.
In the current document, the authors use the term
"privacy" only when referring specifically
to the historic GSS privacy service defined in
<xref target="RFC2203"/>.
Otherwise, the authors use the term "confidentiality",
following the practices of contemporary security communities.
</t>
<t>
We adhere to the convention that a "client"
is a network host that actively initiates an association,
and
a "server" is a network host that passively accepts an association request.
</t>
<t>
RPC documentation historically refers to
the authentication of a connecting host as "machine authentication"
or "host authentication".
TLS documentation refers to the same as "peer authentication".
In the current document there is little distinction between these terms.
</t>
<t>
The term "user authentication" in the current document refers specifically
to the RPC caller's credential, provided in the
"cred"
and
"verf"
fields in each RPC Call.
</t>
</section>

<section
 anchor="section:EC3FEED5-1DE0-454B-9AB3-CE47BA901583"
 title="RPC-Over-TLS in Operation">

<section
 anchor="section:0A03673B-14BA-4228-8A8A-F76AA318CA73"
 title="Discovering Server-side TLS Support">
<t>
The mechanism described in the current document
interoperates fully with RPC implementations
that do not support TLS.
Policy settings on the RPC-on-TLS-enabled peer determine
whether RPC operation continues without the use of TLS
or RPC operation is not permitted.
</t>
<t>
To achieve this, we introduce a new RPC authentication flavor called AUTH_TLS.
This new flavor signals that the client wants
to initiate TLS negotiation if the server supports it.
Except for the modifications described in this section,
the RPC protocol is unaware of security encapsulation
at the transport layer.
</t>
<t>
When an RPC client is ready to begin a TLS session,
it sends a NULL RPC procedure with an auth_flavor of AUTH_TLS.
The value of AUTH_TLS is defined in
<xref target="section:2CD51855-CE40-4B8D-A220-F211C477964F"/>.
The NULL request is made to the same port as if TLS were not in use.
</t>
<t>
The length of the opaque data constituting the credential
sent in the RPC Call message MUST be zero.
The verifier accompanying the credential MUST be an AUTH_NONE
verifier of length zero.
</t>
<t>
The flavor value of the verifier in the RPC Reply message
received from the server MUST be AUTH_NONE.
The length of the verifier's body field is eight.
The bytes of the verifier's body field encode the ASCII characters
"STARTTLS" as a fixed-length opaque.
</t>
<t>
If the RPC server replies with
a reply_stat of MSG_ACCEPTED
and
an AUTH_NONE verifier containing the "STARTTLS" token,
the RPC client follows with a "ClientHello" message.
The client MAY proceed with TLS session establishment
even if the Reply's accept_stat is not SUCCESS
(for example, if the accept_stat is PROG_UNAVAIL).
Once the TLS handshake is complete,
the RPC client and server have established
a secure channel for communicating.
</t>
<t>
If the Reply's reply_stat is MSG_ACCEPTED
but the verifier does not contain the "STARTTLS" token,
or if the Reply's reply_stat is MSG_DENIED,
the RPC client MUST NOT send a "ClientHello" message.
RPC operation can continue,
however it will be without any confidentiality,
integrity or authentication protection from (D)TLS.
</t>
<t>
If, after a successful RPC AUTH_TLS probe,
the subsequent TLS handshake should fail for any reason,
the RPC client reports this failure
to the upper-layer application
the same way it reports an AUTH_ERROR rejection
from the RPC server.
</t>
<t>
If an RPC client uses the AUTH_TLS authentication flavor
on any procedure other than the NULL procedure,
or an RPC client sends an RPC AUTH_TLS probe within
an existing TLS session,
the RPC server MUST reject that RPC Call by setting
the reply_stat field to MSG_DENIED,
the reject_stat field to AUTH_ERROR,
and
the auth_stat field to AUTH_BADCRED.
</t>
</section>

<section
 anchor="section:6EDEF553-C95A-47D7-ABBA-0B537FE3A959"
 title="Authentication">
<t>
Both RPC and TLS have peer and user authentication,
with some overlap in capability between RPC and TLS.
The goal of interoperability with implementations
that do not support TLS requires
limiting the combinations that are allowed
and
precisely specifying the role that each layer plays.
</t>
<t>
Each RPC server that supports RPC-over-TLS MUST possess a unique global identity
(e.g., a certificate that is signed by a well-known trust anchor).
Such an RPC server MUST request a TLS peer identity from each client
upon first contact.
There are two different modes of client deployment:
<list style="hanging">
<t hangText="Server-only Host Authentication"><vspace blankLines="0"/>
In this type of deployment,
the client can authenticate the server host
using the presented server peer TLS identity,
but the server cannot authenticate the client.
In this situation,
RPC-over-TLS clients are anonymous.
They present no globally unique identifier to the server peer.
</t>
<t hangText="Mutual Host Authentication"><vspace blankLines="0"/>
In this type of deployment,
the client possesses an identity (e.g. a certificate) that is backed by a trusted entity.
As part of the TLS handshake, both peers authenticate using the presented TLS identities.
If authentication of either peer fails,
or
if authorization based on those identities blocks access to the server,
the peers MUST reject the association.
</t>
</list>
</t>
<t>
In either of these modes, RPC user authentication is not affected
by the use of transport layer security.
When a client presents a TLS peer identity to an RPC server,
the protocol extension described in the current document
provides no way for the server to know
whether that identity represents one RPC user on that client,
or
is shared amongst many RPC users.
Therefore, a server implementation must not
utilize the remote TLS peer identity for RPC user authentication.
</t>

<section
 anchor="section:12D92596-F310-48C8-A4E0-B6CA038524E5"
 title="Using TLS with RPCSEC GSS">
<t>
To use GSS, an RPC server has to possess a GSS service principal.
On a TLS session, GSS mutual (peer) authentication occurs as usual,
but only after a TLS session has been established for communication.
Authentication of GSS users is unchanged by the use of TLS.
</t>
<t>
RPCSEC GSS can also perform
per-request integrity or confidentiality protection.
When operating over a TLS session, these GSS services become redundant.
An RPC implementation capable of concurrently using TLS and RPCSEC GSS
can use GSS channel binding, as defined in
<xref target="RFC5056"/>,
to determine when an underlying transport provides a sufficient degree
of confidentiality.
Channel bindings for the TLS channel type are defined in
<xref target="RFC5929"/>.
</t>
</section>

</section>

</section>

<section
 anchor="section:D93526DA-7B9D-419B-BE84-4AD8DA48577E"
 title="TLS Requirements">
<t>
When peers negotiate a TLS session that is to transport RPC,
the following restrictions apply:
<list style="symbols">
<t>
Implementations MUST NOT negotiate TLS versions prior to v1.3
(for TLS
<xref target="RFC8446"/>
or DTLS
<xref target="I-D.ietf-tls-dtls13"/>
respectively).
Support for mandatory-to-implement ciphersuites
for the negotiated TLS version is REQUIRED.
</t>
<t>
Implementations MUST support certificate-based mutual authentication.
Support for TLS-PSK mutual authentication
<xref target="RFC4279"/>
is OPTIONAL.
See
<xref target="section:6EDEF553-C95A-47D7-ABBA-0B537FE3A959"/>
for further details.
</t>
<t>
Negotiation of a ciphersuite providing confidentiality as
well as integrity protection is REQUIRED.
Support for and negotiation of compression is OPTIONAL.
</t>
</list>
</t>
<t>
Client implementations MUST include the
"application_layer_protocol_negotiation(16)" extension
<xref target="RFC7301"/>
in their "ClientHello" message
and MUST include the protocol identifier
defined in
<xref target="section:58905D7A-06B1-4469-964A-DAC607DAC500"/>
in that message's ProtocolNameList value.
</t>
<t>
Similary, in response to the "ClientHello" message,
server implementations MUST include the
"application_layer_protocol_negotiation(16)" extension
<xref target="RFC7301"/>
in their "ServerHello" message
and MUST include only the protocol identifier
defined in
<xref target="section:58905D7A-06B1-4469-964A-DAC607DAC500"/>
in that message's ProtocolNameList value.
</t>
<t>
If the server responds incorrectly,
the client MUST NOT establish a TLS session for use with RPC
on this connection.
See
<xref target="RFC7301"/>
for further details about how to form these messages properly.
</t>

<section
 anchor="section:CC204592-F561-49BD-B1C9-DE0FF7F0E7AB"
 title="Base Transport Considerations">
<t>
There is traditionally a strong association between an RPC program
and a destination port number.
The use of TLS or DTLS does not change that association.
Thus it is frequently --
though not always --
the case that a single TLS session
carries traffic for only one RPC program.
</t>

<section
 anchor="section:74B43C7E-5ADC-4FBD-B4EA-FF8F470994A8"
 title="Protected Operation on TCP">
<t>
The use of the Transport Layer Security (TLS) protocol
<xref target="RFC8446"/>
protects RPC on TCP connections.
Typically,
once an RPC client completes the TCP handshake,
it uses the mechanism described in
<xref target="section:0A03673B-14BA-4228-8A8A-F76AA318CA73"/>
to discover RPC-on-TLS support for that connection.
If spurious traffic appears on a TCP connection
between the initial clear-text AUTH_TLS probe
and
the TLS session handshake,
receivers MUST discard that data without response
and then SHOULD drop the connection.
</t>
<t>
The protocol convention specified in the current document
assumes there can be no more than one concurrent TLS session
per TCP connection.
This is true of current generations of TLS,
but might be different in a future version of TLS.
</t>
<t>
Once a TLS session is established on a TCP connection,
no further clear-text communication can occur on that connection
until the session is terminated.
The use of TLS does not alter RPC record framing used on TCP transports.
</t>
<t>
Furthermore,
if an RPC server responds with PROG_UNAVAIL
to an RPC Call within an established TLS session,
that does not imply that RPC server will subsequently
reject the same RPC program on a different TCP connection.
</t>
<t>
Backchannel operation occurs only on connected transports such as TCP.
To protect backchannel operations,
an RPC server uses the existing TLS session on that connection to send
backchannel operations.
The server does not attempt
to establish a TLS session on a TCP connection for backchannel operation.
</t>
<t>
When operation is complete,
an RPC peer terminates a TLS session by sending a TLS Closure Alert
and may then close the TCP connection.
</t>
</section>

<section
 anchor="section:B8BF600E-96DC-4C82-AADF-D593826E9B75"
 title="Protected Operation on UDP">
<t>
RFC Editor:
In the following section,
please replace TBD with the connection_id extension number
that is to be assigned in
<xref target="I-D.ietf-tls-dtls-connection-id"/>.
And, please remove this Editor's Note
before this document is published.
</t>
<t>
RPC over UDP is protected using
the Datagram Transport Layer Security (DTLS) protocol
<xref target="I-D.ietf-tls-dtls13"/>.
</t>
<t>
Using DTLS does not introduce
reliable
or
in-order
semantics to RPC on UDP.
Each RPC message MUST fit in a single DTLS record.
DTLS encapsulation has overhead,
which reduces the effective Path MTU (PMTU)
and thus the maximum RPC payload size.
The use of DTLS record replay protection is REQUIRED
when transporting RPC traffic.
</t>
<t>
As soon as a client initializes a UDP socket
for use with an RPC server,
it uses the mechanism described in
<xref target="section:0A03673B-14BA-4228-8A8A-F76AA318CA73"/>
to discover DTLS support for an RPC program on a particular port.
It then negotiates a DTLS session.
</t>
<t>
Multi-homed RPC clients and servers may send protected RPC messages
via network interfaces that were not involved in the handshake that
established the DTLS session.
Therefore, when protecting RPC traffic,
each DTLS handshake MUST include the "connection_id(TBD)" extension
described in Section 9 of
<xref target="I-D.ietf-tls-dtls13"/>,
and RPC-on-DTLS peer endpoints MUST provide a ConnectionID
with a non-zero length.
Endpoints implementing RPC programs
that expect a significant number of concurrent clients
should employ ConnectionIDs of at least 4 bytes in length.
</t>
<t>
Sending a TLS Closure Alert terminates a DTLS session.
Subsequent RPC messages exchanged between the RPC client and server
are no longer protected until a new DTLS session is established.
</t>
</section>

<section
 anchor="section:BFCC24B1-E6D4-4ABC-A5F3-B71E8E96878F"
 title="Protected Operation on Other Transports">
<t>
Transports that provide intrinsic TLS-level security
(e.g., QUIC)
need to be addressed separately from the current document.
In such cases, the use of TLS is not opportunistic
as it can be for TCP or UDP.
</t>
<t>
RPC-over-RDMA can make use of transport layer security
below the RDMA transport layer
<xref target="RFC8166"/>.
The exact mechanism is not within the scope of the current document.
Because there might not be other provisions
to exchange client and server certificates,
authentication material exchange
needs to be provided by facilities
within a future version
of the RPC-over-RDMA transport protocol.
</t>

</section>

</section>

<section
 anchor="section:936921ED-67BB-46BF-B316-6740E07F6652"
 title="TLS Peer Authentication">
<t>
TLS can perform peer authentication
using any of the following mechanisms:
</t>

<section
 anchor="section:7A68F518-2C02-4705-8218-4F13E51372F4"
 title="X.509 Certificates Using PKIX trust">
<t>
Implementations are REQUIRED to support this mechanism.
In this mode, the tuple
(serial number of the presented certificate; Issuer)
uniquely identifies the RPC peer.
<list style="symbols">
<t>
Implementations MUST allow the configuration
of a list of trusted Certification Authorities
for incoming connections.
</t>
<t>
Certificate validation MUST include the verification rules as per
<xref target="RFC5280"/>.
</t>
<t>
Implementations SHOULD indicate their trusted Certification
Authorities (CAs).
</t>
<t>
Peer validation always includes a check
on whether the locally configured expected
DNS name
or
IP address of the server that is contacted
matches its presented certificate.
DNS names and IP addresses can be contained
in the Common Name (CN) or subjectAltName entries.
For verification, only one of these entries is to be considered.
The following precedence applies:
for DNS name validation, subjectAltName:DNS has precedence over CN;
for IP address validation, subjectAltName:iPAddress has precedence over CN.
Implementors of this specification are advised to read Section 6 of
<xref target="RFC6125"/>
for more details on DNS name validation.
</t>
<t>
For services accessed by their network identifiers (netids) and universal
network addresses (uaddr), the iPAddress subjectAltName SHOULD be present in
the certificate and must exactly match the address represented by universal
address.
</t>
<t>
Implementations MAY allow the configuration
of a set of additional properties of the certificate
to check for a peer's authorization to communicate
(e.g., a set of allowed values in subjectAltName:URI
or a set of allowed X509v3 Certificate Policies).
</t>
<t>
When the configured trust base changes
(e.g., removal of a CA from the list of trusted CAs;
issuance of a new CRL for a given CA),
implementations MAY renegotiate the TLS session
to reassess the connecting peer's continued authorization.
</t>
</list>
</t>
<t>
Authenticating a connecting entity does not mean
the RPC server necessarily wants to communicate with that client.
For example, if the Issuer is not in a trusted set of Issuers,
the RPC server may decline to perform RPC transactions with this client.
Implementations that want to support a wide variety of trust models
should expose as many details of the presented certificate
to the administrator as possible
so that the administrator can implement the trust model.
As a suggestion, at least the following parameters
of the X.509 client certificate SHOULD be exposed:
<list style="symbols">
<t>
Originating IP address
</t>
<t>
Certificate Fingerprint
</t>
<t>
Issuer
</t>
<t>
Subject
</t>
<t>
all X509v3 Extended Key Usage
</t>
<t>
all X509v3 Subject Alternative Name
</t>
<t>
all X509v3 Certificate Policies
</t>
</list>
</t>
</section>

<section
 anchor="section:15B9BEE9-9D2F-49B7-900E-0BA9BCE9CB27"
 title="X.509 Certificates Using Fingerprints">
<t>
This mechanism is OPTIONAL to implement.
In this mode, the fingerprint of the presented certificate
uniquely identifies the RPC peer.
</t>
<t>
Implementations SHOULD allow the configuration
of a list of trusted certificates,
identified via fingerprint of the DER-encoded certificate octets.
Implementations MUST support SHA-256
<xref target="FIPS.180-4"/>
or stronger as the hash algorithm for the fingerprint.
</t>
</section>

<section
 anchor="section:6DA9ED5F-BAD9-4126-95B7-E2331655A01E"
 title="Pre-Shared Keys">
<t>
This mechanism is OPTIONAL to implement.
In this mode, the RPC peer is uniquely identified
by keying material that has been shared out-of-band
or
by a previous TLS-protected connection (see Section 2.2 of
<xref target="RFC8446"/>).
At least the following parameters of the TLS connection SHOULD be exposed:
<list style="symbols">
<t>
Originating IP address
</t>
<t>
TLS Identifier
</t>
</list>
</t>
</section>

<section
 anchor="section:CBA3E016-B160-4C37-85CA-8D467A6AFE83"
 title="Token Binding">
<t>
This mechanism is OPTIONAL to implement.
In this mode, a token uniquely identifies the RPC peer.
</t>
<t>
Versions of TLS after TLS 1.2 contain a token binding mechanism
that is more secure than using certificates.
This mechanism is detailed in
<xref target="RFC8471"/>.
</t>
</section>

</section>

</section>

<section
 anchor="section:88BBA4D6-ED42-4FE6-A208-9D277B68729A"
 title="Implementation Status">
<t>
RFC Editor:
Please remove this section and the reference to RFC 7942
before this document is published.
</t>
<t>
This section records the status of known implementations of the
protocol defined by this specification at the time of posting of
this Internet-Draft, and is based on a proposal described in
<xref target="RFC7942"/>.
The description of implementations in this section is
intended to assist the IETF in its decision processes in
progressing drafts to RFCs.
</t>
<t>
Please note that the listing of any individual implementation here
does not imply endorsement by the IETF.
Furthermore, no effort has been spent to verify the information
presented here that was supplied by IETF contributors.
This is not intended as, and must not be construed to be, a
catalog of available implementations or their features.
Readers are advised to note that other implementations may exist.
</t>

<section
 anchor="section:94AA7844-E393-4353-A35D-DA01D13C909B"
 title="DESY NFS server">
<t>
<list style="hanging" hangIndent="11">
<t hangText="Organization:">
DESY
</t>
<t hangText="URL:">
<eref
 target="https://desy.de">
https://desy.de
</eref>
</t>
<t hangText="Maturity:">
Implementation will be based on mature versions of the current document.
</t>
<t hangText="Coverage:">
The bulk of this specification is implemented including DTLS.
</t>
<t hangText="Licensing:">
LGPL
</t>
<t hangText="Implementation experience:">
The implementer has read and commented on the current document.
</t>
</list>
</t>
</section>

<section
 anchor="section:B387F281-958F-470D-B4D4-1D85907B89F1"
 title="Hammerspace NFS server">
<t>
<list style="hanging" hangIndent="11">
<t hangText="Organization:">
Hammerspace
</t>
<t hangText="URL:">
<eref
 target="https://hammerspace.com">
https://hammerspace.com
</eref>
</t>
<t hangText="Maturity:">
Prototype software based on early versions of the current document.
</t>
<t hangText="Coverage:">
The bulk of this specification is implemented.
The use of DTLS functionality is not implemented.
</t>
<t hangText="Licensing:">
Proprietary
</t>
<t hangText="Implementation experience:">
No comments from implementors.
</t>
</list>
</t>
</section>

<section
 anchor="section:BF03B3A2-4483-4404-9E7A-F60FCD850F31"
 title="Linux NFS server and client">
<t>
<list style="hanging" hangIndent="11">
<t hangText="Organization:">
The Linux Foundation
</t>
<t hangText="URL:">
<eref
 target="https://www.kernel.org">
https://www.kernel.org
</eref>
</t>
<t hangText="Maturity:">
Prototype software based on early versions of the current document.
</t>
<t hangText="Coverage:">
The bulk of this specification has yet to be implemented.
The use of DTLS functionality is not planned.
</t>
<t hangText="Licensing:">
GPLv2
</t>
<t hangText="Implementation experience:">
No comments from the implementor.
</t>
</list>
</t>
</section>

<section
 anchor="section:86689813-E907-4046-ADF1-58E2BF668546"
 title="FreeBSD NFS server and client">
<t>
<list style="hanging" hangIndent="11">
<t hangText="Organization:">
The FreeBSD Project
</t>
<t hangText="URL:">
<eref
 target="https://www.freebsd.org">
https://www.freebsd.org
</eref>
</t>
<t hangText="Maturity:">
Prototype software based on early versions of the current document.
</t>
<t hangText="Coverage:">
The bulk of this specification is implemented.
The use of DTLS functionality is not planned.
</t>
<t hangText="Licensing:">
BSD
</t>
<t hangText="Implementation experience:">
Implementers have read and commented on the current document.
</t>
</list>
</t>
</section>

</section>

<section
 anchor="section:2AE49383-E6B2-4830-8407-995FEBF727F2"
 title="Security Considerations">
<t>
One purpose of the mechanism described in the current document
is to protect RPC-based applications against threats
to the confidentiality of RPC transactions
and
RPC user identities.
A taxonomy of these threats appears in Section 5 of
<xref target="RFC6973"/>.
Also, Section 6 of
<xref target="RFC7525"/>
contains a detailed discussion
of technologies used in conjunction with TLS.
Implementers should familiarize themselves with these materials.
</t>

<section
 anchor="section:51737BB5-2B65-441E-AD1D-7EBF5123C079"
 title="Limitations of an Opportunistic Approach">
<t>
The purpose of using an explicitly opportunistic approach
is to enable interoperation
with implementations that do not support RPC-over-TLS.
A range of options is allowed by this approach,
from "no peer authentication or encryption"
to
"server-only authentication with encryption"
to
"mutual authentication with encryption".
The actual security level may indeed
be selected based on policy and without user intervention.
</t>
<t>
In environments where interoperability is a priority,
the security benefits of TLS are partially or entirely waived.
Implementations of the mechanism described in the current document
must take care to accurately represent to all RPC consumers
the level of security that is actually in effect,
and are REQUIRED to provide an audit log
of RPC-over-TLS security mode selection.
</t>
<t>
In all other cases,
the adoption, implementation, and deployment of
RPC-based upper-layer protocols that enforce the use of
TLS authentication and encryption
(when similar RPCSEC GSS services are not in use)
is strongly encouraged.
</t>

<section
 anchor="section:8894BDD2-0E0B-47A3-A2CB-70E4D93B55B0"
 title="STRIPTLS Attacks">
<t>
A classic form of attack on network protocols that initiate an association
in plain-text to discover support for TLS is a man-in-the-middle
that alters the plain-text handshake to make it appear as though
TLS support is not available on one or both peers.
Clients implementers can choose from the following to mitigate
STRIPTLS attacks:
<list style="symbols">
<t>
A TLSA record [RFC6698] can alert clients that TLS is expected to work,
and provide a binding of hostname to x.509 identity.
If TLS cannot be negotiated or authentication fails,
the client disconnects and reports the problem.
</t>
<t>
Client security policy can require
that a TLS session is established on every connection.
If an attacker spoofs the handshake,
the client disconnects and reports the problem.
If TLSA records are not available, this approach is strongly encouraged.
</t>
</list>
</t>
</section>

<section
 anchor="section:9C03417D-1D3D-4D43-BC43-6F7387736AF7"
 title="Privacy Leakage Before Session Establishment">
<t>
As mentioned earlier,
communication between an RPC client and server
appears in the clear on the network
prior to the establishment of a TLS session.
This clear-text information usually includes
transport connection handshake exchanges,
the RPC NULL procedure probing support for TLS,
and the initial parts of TLS session establishment.
Appendix C of
<xref target="RFC8446"/>
discusses precautions that can mitigate exposure during
the exchange of connnection handshake information
and
TLS certificate material that might enable attackers
to track the RPC client.
</t>
<t>
Any RPC traffic that appears on the network before
a TLS session has been established is vulnerable to
monitoring or undetected modification.
A secure client implementation limits or prevents
any RPC exchanges that are not protected.
</t>
<t>
The exception to this edict is
the initial RPC NULL procedure that acts as a STARTTLS message,
which cannot be protected.
This RPC NULL procedure contains no arguments or results,
and the AUTH_TLS authentication flavor it uses
does not contain user information.
</t>
</section>

</section>

<section
 anchor="section:B9F8A982-CB0E-40FC-9460-680E89DB0001"
 title="TLS Identity Management on Clients">
<t>
The goal of the RPC-on-TLS protocol extension
is to hide the content of RPC requests while they are in transit.
The RPC-on-TLS protocol by itself cannot protect
against exposure of a user's RPC requests to other users on the same client.
</t>
<t>
Moreover, client implementations are free to transmit RPC requests
for more than one RPC user using the same TLS session.
Depending on the details of the client RPC implementation,
this means that the client's TLS identity material
is potentially visible to every RPC user that shares a TLS session.
Privileged users may also be able to access this TLS identity.
</t>
<t>
As a result,
client implementations need to carefully segregate
TLS identity material so that local access to it
is restricted to only the local users that are authorized
to perform operations on the remote RPC server.
</t>
</section>

<section
 anchor="section:552B02A0-F19E-4B46-809C-672A6AE931A1"
 title="Security Considerations for AUTH_SYS on TLS">
<t>
Using a TLS-protected transport
when the AUTH_SYS authentication flavor is in use
addresses several longstanding weaknesses
(as detailed in
<xref target="section:C7FB9DB5-5F4F-45AD-8BF7-74FFCA08BEBB"/>).
TLS augments AUTH_SYS by providing both
integrity protection and confidentiality
that AUTH_SYS lacks.
TLS protects
data payloads,
RPC headers,
and
user identities
against monitoring and alteration while in transit.
TLS guards against the insertion or deletion of messages,
thus also ensuring the integrity of the message stream
between RPC client and server.
Lastly, transport layer encryption plus peer authentication
protects receiving XDR decoders from deserializing untrusted data,
a common coding vulnerability.
</t>
<t>
The use of TLS enables strong authentication
of the communicating RPC peers,
providing a degree of non-repudiation.
When AUTH_SYS is used with TLS,
but the RPC client is unauthenticated,
the RPC server still acts on RPC requests
for which there is no trustworthy authentication.
In-transit traffic is protected, but the RPC client itself
can still misrepresent user identity without server detection.
TLS without authentication is an improvement
from AUTH_SYS without encryption,
but it leaves a critical security exposure.
</t>
<t>
In light of the above,
it is RECOMMENDED that when AUTH_SYS is used,
every RPC client should present host authentication material
to RPC servers to prove that the client is a known one.
The server can then determine whether the UIDs and GIDs
in AUTH_SYS requests from that client can be accepted.
</t>
<t>
The use of TLS does not enable RPC clients to detect compromise
that leads to the impersonation of RPC users.
Also, there continues to be a requirement
that the mapping of 32-bit user and group ID values
to user identities
is the same on both the RPC client and server.
</t>
</section>

<section
 anchor="section:55D006D3-8CA6-4D7F-AF0D-BFB0FFEF7595"
 title="Best Security Policy Practices">
<t>
RPC-over-TLS implementations and deployments
are strongly encouraged to adhere to the following policies
to achieve the strongest possible security with RPC-over-TLS.
<list style="symbols">
<t>
When using AUTH_NULL or AUTH_SYS,
both peers are required to have
DNS TLSA records
and
certificate material,
and a policy that requires
mutual peer authentication
and
rejection of a connection when host authentication fails.
</t>
<t>
When using RPCSEC_GSS,
GSS/Kerberos provides adequate host authentication
and
a policy that requires GSS mutual authentication and
rejection of a connection when host authentication fails.
GSS integrity and privacy services, therefore, can be disabled
in favor of TLS encryption with peer authentication.
</t>
</list>
</t>

</section>

</section>

<section
 anchor="section:7B126473-2A13-453B-9BCA-66BC11B7B018"
 title="IANA Considerations">
<t>
RFC Editor: In the following subsections,
please replace RFC-TBD with the RFC number assigned to this document.
And, please remove this Editor's Note
before this document is published.
</t>

<section
 anchor="section:2CD51855-CE40-4B8D-A220-F211C477964F"
 title="RPC Authentication Flavor">
<t>
Following Appendix B of
<xref target="RFC5531"/>,
the authors request a single new entry
in the RPC Authentication Flavor Numbers registry.
The purpose of the new authentication flavor
is to signal the use of TLS with RPC.
This new flavor is not a pseudo-flavor.
</t>
<t>
The fields in the new entry are assigned as follows:
<list style="hanging">
<t hangText="Identifier String:">
AUTH_TLS
</t>
<t hangText="Flavor Name:">
TLS
</t>
<t hangText="Value:">
7
</t>
<t hangText="Description:">
Signals the use of TLS to protect RPC messages on socket-based transports
</t>
<t hangText="Reference:">
RFC-TBD
</t>
</list>
</t>
</section>

<section
 anchor="section:58905D7A-06B1-4469-964A-DAC607DAC500"
 title="ALPN Identifier for SUNRPC">
<t>
Following Section 6 of
<xref target="RFC7301"/>,
the authors request the allocation of the following value
in the "Application-Layer Protocol Negotiation (ALPN) Protocol IDs" registry.
The "sunrpc" string identifies SunRPC when used over TLS.
<list style="hanging">
<t hangText="Protocol:">
SunRPC
</t>
<t hangText="Identification Sequence:">
0x73 0x75 0x6e 0x72 0x70 0x63 ("sunrpc")
</t>
<t hangText="Reference:">
RFC-TBD
</t>
</list>
</t>
</section>

</section>

</middle>

<back>

<references title="Normative References">

<reference
 anchor="FIPS.180-4">
<front>
<title>
Secure Hash Standard,
Federal Information Processing Standards Publication FIPS PUB 180-4
</title>
<author>
<organization>
National Institute of Standards and Technology
</organization>
</author>
<date month="August" year="2015"/>
</front>
<seriesInfo name="FIPS PUB" value="180-4"/>
<format type="PDF" target="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf"/>
</reference>

<?rfc include="reference.I-D.ietf-tls-dtls13.xml"?>
<?rfc include="reference.I-D.ietf-tls-dtls-connection-id"?>

<?rfc include="reference.RFC.2119.xml"?>
<?rfc include="reference.RFC.4279.xml"?>
<?rfc include="reference.RFC.5056.xml"?>
<?rfc include="reference.RFC.5280.xml"?>
<?rfc include="reference.RFC.5531.xml"?>
<?rfc include="reference.RFC.5929.xml"?>
<?rfc include="reference.RFC.6125.xml"?>
<?rfc include="reference.RFC.7258.xml"?>
<?rfc include="reference.RFC.7301.xml"?>
<?rfc include="reference.RFC.7942.xml"?>.
<?rfc include="reference.RFC.8174.xml"?>
<?rfc include="reference.RFC.8446.xml"?>

</references>

<references title="Informative References">

<?rfc include="reference.RFC.2203.xml"?>
<?rfc include="reference.RFC.2818.xml"?>
<?rfc include="reference.RFC.6698.xml"?>
<?rfc include="reference.RFC.6973.xml"?>
<?rfc include="reference.RFC.7435.xml"?>
<?rfc include="reference.RFC.7525.xml"?>
<?rfc include="reference.RFC.8166.xml"?>
<?rfc include="reference.RFC.8471.xml"?>

</references>

<section
 anchor="section:C7FB9DB5-5F4F-45AD-8BF7-74FFCA08BEBB"
 title="Known Weaknesses of the AUTH_SYS Authentication Flavor">
<t>
The ONC RPC protocol, as specified in
<xref target="RFC5531"/>,
provides several modes of security,
traditionally referred to as "authentication flavors".
Some of these flavors provide much more than an authentication service.
We refer to these as
authentication flavors,
security flavors,
or simply,
flavors.
One of the earliest and most basic flavors is AUTH_SYS,
also known as AUTH_UNIX.
Appendix A of
<xref target="RFC5531"/>
specifies AUTH_SYS.
</t>
<t>
AUTH_SYS assumes that the RPC client and server
both use POSIX-style user and group identifiers
(each user and group can be distinctly represented
as a 32-bit unsigned integer).
It also assumes that the client and server
both use the same mapping of user and group to an integer.
One user ID, one primary group ID, and up to 16 supplemental group IDs
are associated with each RPC request.
The combination of these identifies the entity on the client
that is making the request.
</t>
<t>
A string identifies peers (hosts) in each RPC request.
<xref target="RFC5531"/>
does not specify any requirements for this string
other than that is no longer than 255 octets.
It does not have to be the same from request to request.
Also, it does not have to match the DNS hostname of the sending host.
For these reasons,
even though most implementations fill in their hostname in this field,
receivers typically ignore its content.
</t>
<t>
Appendix A of
<xref target="RFC5531"/>
contains a brief explanation of security considerations:
<list style="none">
<t>
It should be noted that use of this flavor of authentication does not
guarantee any security for the users or providers of a service, in
itself.  The authentication provided by this scheme can be considered
legitimate only when applications using this scheme and the network
can be secured externally, and privileged transport addresses are
used for the communicating end-points (an example of this is the use
of privileged TCP/UDP ports in UNIX systems -- note that not all
systems enforce privileged transport address mechanisms).
</t>
</list>
</t>
<t>
It should be clear, therefore, that AUTH_SYS by itself
(i.e., without strong client authentication)
offers little to no communication security:
<list style="numbers">
<t>
It does not protect the confidentiality or integrity of
RPC requests,
users,
or
payloads,
relying instead on "external" security.
</t>
<t>
It does not provide authentication of RPC peer machines,
other than inclusion of an unprotected domain name.
</t>
<t>
The use of 32-bit unsigned integers as user and group identifiers
is problematic because these data types are
not cryptographically signed or otherwise verified by any authority.
</t>
<t>
Because the user and group ID fields are not integrity-protected,
AUTH_SYS does not provide non-repudiation.
</t>
</list>
</t>

</section>

<section
 anchor="section:4959412F-37AD-42B8-9169-D477148F81A8"
 numbered="no"
 title="Acknowledgments">
<t>
Special mention goes to Charles Fisher, author of
<eref
 target="https://www.linuxjournal.com/content/encrypting-nfsv4-stunnel-tls">
"Encrypting NFSv4 with Stunnel TLS"
</eref>.
His article inspired the mechanism described in the current document.
</t>
<t>
Many thanks to Tigran Mkrtchyan and Rick Macklem for their work
on prototype implementations and feedback on the current document.
</t>
<t>
Thanks to Derrell Piper for numerous suggestions that improved both
this simple mechanism
and
the current document's security-related discussion.
</t>
<t>
Many thanks to
Transport Area Director Magnus Westerlund
for his sharp questions and careful reading
of the final revisions of the current document.
The text of
<xref target="section:B8BF600E-96DC-4C82-AADF-D593826E9B75"/>
is mostly his contribution.
</t>
<t>
The authors are additionally grateful to
Bill Baker,
David Black,
Alan DeKok,
Lars Eggert,
Benjamin Kaduk,
Olga Kornievskaia,
Greg Marsden,
Alex McDonald,
Justin Mazzola Paluska,
Tom Talpey,
and
Martin Thomson
for their input and support of this work.
</t>
<t>
Finally, special thanks to
NFSV4 Working Group Chair and
document shepherd David Noveck,
NFSV4 Working Group Chairs
Spencer Shepler
and
Brian Pawlowski,
and
NFSV4 Working Group Secretary Thomas Haynes
for their guidance and oversight.
</t>
</section>

</back>

</rfc>
